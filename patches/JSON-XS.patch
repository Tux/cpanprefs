diff -purd a/Changes b/Changes
--- a/Changes	2013-10-29 16:55:22.000000000 +0100
+++ b/Changes	2014-02-10 09:20:59.863950556 +0100
@@ -80,7 +80,6 @@ TODO: http://stevehanov.ca/blog/index.ph
           around the issue.
 	- ignore RMAGICAL hashes w.r.t. CANONICAL.
 	- try to work around a possible char signedness issue on aix.
-        - require common sense.
 
 2.24  Sat May 30 08:25:45 CEST 2009
 	- the incremental parser did not update its parse offset
diff -purd a/Makefile.PL b/Makefile.PL
--- a/Makefile.PL	2013-10-28 22:28:41.000000000 +0100
+++ b/Makefile.PL	2014-02-10 10:01:10.827283687 +0100
@@ -11,8 +11,18 @@ WriteMakefile(
     VERSION_FROM => "XS.pm",
     NAME         => "JSON::XS",
     PREREQ_PM    => {
-       common::sense     => 0,
        Types::Serialiser => 0,
     },
 );
 
+1;
+
+package MY;
+
+sub postamble
+{
+    join "\n" =>
+	q{XS.xs: Makefile}, # must use $$ as make will reduce that to $
+	q{	perl -pi -e's,//+\s*(.*),/* $$1 */,' XS.xs},
+	q{};
+    } # postamble
diff -purd a/META.json b/META.json
--- a/META.json	2013-10-29 16:55:40.000000000 +0100
+++ b/META.json	2014-02-10 09:21:05.267009900 +0100
@@ -33,7 +33,6 @@
       "runtime" : {
          "requires" : {
             "Types::Serialiser" : "0",
-            "common::sense" : "0"
          }
       }
    },
diff -purd a/META.yml b/META.yml
--- a/META.yml	2013-10-29 16:55:40.000000000 +0100
+++ b/META.yml	2014-02-10 09:21:07.643036028 +0100
@@ -19,5 +19,4 @@ no_index:
     - inc
 requires:
   Types::Serialiser: 0
-  common::sense: 0
 version: 3.01
diff -purd a/XS.pm b/XS.pm
--- a/XS.pm	2013-10-29 16:55:34.000000000 +0100
+++ b/XS.pm	2014-02-10 09:21:19.987171690 +0100
@@ -101,7 +101,8 @@ stuff). Or you can combine those feature
 
 package JSON::XS;
 
-use common::sense;
+use strict;
+use warnings;
 
 our $VERSION = 3.01;
 our @ISA = qw(Exporter);
diff -purd a/t/06_pc_pretty.t b/t/06_pc_pretty.t
--- a/t/06_pc_pretty.t	2009-09-08 02:37:43.000000000 +0200
+++ b/t/06_pc_pretty.t	2014-02-10 09:14:36.145733167 +0100
@@ -23,8 +23,8 @@ is($js,q|[
    "hoge",
    {
       "foo" : "bar"
-   }
-]
+      }
+   ]
 |);
 
 $obj = { foo => [ {a=>"b"}, 0, 1, 2 ] };
@@ -40,12 +40,12 @@ is($js,q|{
    "foo" : [
       {
          "a" : "b"
-      },
+         },
       0,
       1,
       2
-   ]
-}
+      ]
+   }
 |);
 
 $obj = { foo => [ {a=>"b"}, 0, 1, 2 ] };
@@ -56,11 +56,11 @@ is($js,q|{"foo":[{"a":"b"},0,1,2]}|);
 
 $obj = {foo => "bar"};
 $pc->indent(1);
-is($pc->encode($obj), qq|{\n   "foo":"bar"\n}\n|, "nospace");
+is($pc->encode($obj), qq|{\n   "foo":"bar"\n   }\n|, "nospace");
 $pc->space_after(1);
-is($pc->encode($obj), qq|{\n   "foo": "bar"\n}\n|, "after");
+is($pc->encode($obj), qq|{\n   "foo": "bar"\n   }\n|, "after");
 $pc->space_before(1);
-is($pc->encode($obj), qq|{\n   "foo" : "bar"\n}\n|, "both");
+is($pc->encode($obj), qq|{\n   "foo" : "bar"\n   }\n|, "both");
 $pc->space_after(0);
-is($pc->encode($obj), qq|{\n   "foo" :"bar"\n}\n|, "before");
+is($pc->encode($obj), qq|{\n   "foo" :"bar"\n   }\n|, "before");
 
diff -purd a/t/11_pc_expo.t b/t/11_pc_expo.t
--- a/t/11_pc_expo.t    2014-02-10 12:42:55 +0100
+++ b/t/11_pc_expo.t    2014-02-10 12:39:48 +0100
@@ -28,9 +28,9 @@ $js = $pc->encode($obj);
 is($js,'[0.000123]', 'digit 1.23E-4');


-$js  = q|[1.01e+30]|;
+$js  = q|[1.01e+60]|;
 $obj = $pc->decode($js);
-is($obj->[0], 1.01e+30, 'digit 1.01e+30');
+is($obj->[0], 1.01e+60, 'digit 1.01e+60');
 $js = $pc->encode($obj);
-like($js,qr/\[1.01[Ee]\+0?30\]/, 'digit 1.01e+30');
+like($js,qr/\[1.01[Ee]\+0?60\]/, 'digit 1.01e+60');

diff -purd a/XS.xs b/XS.xs
--- a/XS.xs	2014-02-10 08:58:23.000000000 +0100
+++ b/XS.xs	2014-02-10 09:15:28.996314147 +0100
@@ -520,6 +520,11 @@ encode_av (enc_t *enc, AV *av)
       encode_nl (enc); --enc->indent; encode_indent (enc);
     }
 
+  if (enc->json.flags & F_INDENT) { /* pretty, so indent! */
+      encode_ch (enc, ' ');
+      encode_ch (enc, ' ');
+      encode_ch (enc, ' ');
+      }
   encode_ch (enc, ']');
 }
 
@@ -688,6 +693,11 @@ encode_hv (enc_t *enc, HV *hv)
           }
     }
 
+  if (enc->json.flags & F_INDENT) { /* pretty, so indent! */
+      encode_ch (enc, ' ');
+      encode_ch (enc, ' ');
+      encode_ch (enc, ' ');
+      }
   encode_ch (enc, '}');
 }
 
